AWSTemplateFormatVersion: 2010-09-09
Description: Web service to host a Datasette instance on AWS.

Parameters:
  Bucket:
    Type: String
  DbFiles:
    Type: String

Resources:
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub ${Bucket}
        S3Key: package.zip
      Runtime: python3.8
      Description: !Sub ${AWS::StackName} Datasette
      FunctionName: !Sub ${AWS::StackName}-${AWS::AccountId}
      Handler: index.handler
      MemorySize: 1536
      Role: !GetAtt LambdaIAMRole.Arn
      Timeout: 15
      Layers:
        - arn:aws:lambda:us-east-1:562933535245:layer:datasette-0_39:8
      Environment:
        Variables:
          Bucket: !Sub ${Bucket}
          DbFiles: !Sub ${DbFiles}

  LambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-${AWS::AccountId}:*
              - Action:
                  - s3:GetObject
                Effect: Allow
                Resource:
                  - !Sub arn:aws:s3:::${Bucket}/*
          PolicyName: lambda

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-${AWS::AccountId}
      RetentionInDays: 14

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${AWS::StackName} Datasette Gateway
      EndpointConfiguration:
        Types:
          - REGIONAL

  RootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: '200'
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt LambdaFunction.Arn
      ResourceId: !GetAtt ApiGateway.RootResourceId
      RestApiId: !Ref ApiGateway

  ProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: '200'
        RequestParameters:
          integration.request.path.proxy: 'method.request.path.proxy'
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt LambdaFunction.Arn
      ResourceId: !Ref Resource
      RestApiId: !Ref ApiGateway

  Resource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      RestApiId: !Ref ApiGateway
      PathPart: '{proxy+}'

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - RootMethod
      - ProxyMethod
    Properties:
      RestApiId: !Ref ApiGateway

  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      MethodSettings:
        - HttpMethod: '*'
          LoggingLevel: INFO
          ResourcePath: '/'
          DataTraceEnabled: true
      RestApiId: !Ref ApiGateway
      StageName: datasette

  LambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Sub ${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com
            Id: datasette
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
            OriginPath: /datasette
        Enabled: true
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          TargetOriginId: datasette
          ForwardedValues:
            QueryString: true
            Headers:
              - Referer
              - CloudFront-Viewer-Country
              - CloudFront-Is-Desktop-Viewer
              - CloudFront-Is-Mobile-Viewer
              - CloudFront-Is-SmartTV-Viewer
              - CloudFront-Is-Tablet-Viewer
              - User-Agent
            Cookies:
              Forward: none
          ViewerProtocolPolicy: allow-all
        PriceClass: PriceClass_100

Outputs:
  ApiUrl:
    Value: !Sub
      - https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com/${StageName}
      - ApiId: !Ref ApiGateway
        StageName: !Ref ApiStage

  CloudFrontUrl:
    Value: !Sub
      - https://${DomainName}
      - DomainName: !GetAtt CloudFrontDistribution.DomainName
