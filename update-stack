#!/bin/bash

set -euo pipefail
set -x

logfile=$(mktemp)
finish() {
  rm -f "${logfile}"
}
trap finish EXIT

stack_exists() {
  local stack_name
  stack_name=${1:?must provide stack name}
  aws cloudformation describe-stacks --stack-name "${stack_name}" &> /dev/null
}

has_s3patch() {
  which s3patch > /dev/null
}

s3cp() {
  from=${1:?must specify local file, e.g. file.zip}
  to=${2:?must specify remote file, e.g. s3://bucket/key}

  if has_s3patch; then
    s3patch -v cp "${from}" "${to}"
  else
    aws s3 cp "${from}" "${to}"
  fi
}

create_or_update_stack() {
  local cmd
  local stack_name
  local rv
  stack_name=${1:?must specify stack name}
  shift
  cmd="update-stack"

  if ! stack_exists "${stack_name}"; then
    cmd="create-stack"
    aws cloudformation create-stack --stack-name="${stack_name}" "$@" 
    aws cloudformation wait stack-create-complete --stack-name="${stack_name}"
  else
    if aws cloudformation update-stack --stack-name="${stack_name}" "$@" |& tee "${logfile}"; then
      aws cloudformation wait stack-update-complete --stack-name="${stack_name}"
    else
      rv=$?
      # There must be a less janky way to detect this. When the template hasn't changed,
      # the update-stack command will fail because there are no updates to perform.
      # That's not what we'd like; so we check the output for this string. It'll
      # likely fail to detect this case in non-English locales, though.
      if grep --silent "No updates are to be performed" "${logfile}"; then
        return 0
      fi
      return "${rv}"
    fi
  fi
}

main() {
  stack_name=${1:?must provide CloudFormation stack name}
  db=${2:?must provide SQLite db}

  if [ ! -e "${db}" ]; then
    echo "error: cannot find database ${db}" > /dev/stderr
    exit 2
  fi

  create_or_update_stack "${stack_name}" --template-body=file://stack-prereq.yaml
  bucket=$(aws cloudformation describe-stack-resources --stack-name "${stack_name}" --logical-resource-id S3Bucket --query StackResources[0].PhysicalResourceId --output text)

  if true; then
    rm -f package.zip
    pushd app
    zip -r ../package.zip .
    popd

    s3cp package.zip s3://"$bucket"/package.zip
  fi

  create_or_update_stack "${stack_name}-lambda" --capabilities CAPABILITY_IAM --parameters ParameterKey=Bucket,ParameterValue="${bucket}" --template-body=file://stack-lambda.yaml

  s3cp "${db}" s3://"${bucket}"/db.db

  lambda=$(aws cloudformation describe-stack-resources --stack-name "${stack_name}-lambda" --logical-resource-id LambdaFunction --query StackResources[0].PhysicalResourceId --output text)
  aws lambda update-function-code --function-name "$lambda" --s3-bucket "${bucket}" --s3-key package.zip

  aws cloudformation describe-stacks --stack-name "${stack_name}"-lambda --query Stacks[0].Outputs[0].OutputValue --output text
}

main "$@"
